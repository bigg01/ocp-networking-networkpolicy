############### tkggo tcp raw test ALPHA test 31.01.19
# frontend
{{ range $cfgIdx, $cfg := .State }}

{{- if (isTrue (index $cfg.Annotations "haproxy.router.six-group.com/rawtcp")) }}

  frontend six_public_tcp_raw_{{$cfgIdx}}

      {{- if ne (env "ROUTER_SYSLOG_ADDRESS") ""}}

    option tcplog
    # SIX custom log
    {{- if ne (env "SIX_TCP_ROUTER_SYSLOG_FORMAT") "" }}
    log-format {{env "SIX_TCP_ROUTER_SYSLOG_FORMAT"}}
    {{- end }}
   # SIX custom log end

      {{- end }}
    # haproxy.router.openshift.io/bindport: '9200'
    # haproxy.router.openshift.io/rawtcp: 'true'

    {{- if (isInteger (index $cfg.Annotations "haproxy.router.six-group.com/bindport")) }}

    bind :{{ index $cfg.Annotations "haproxy.router.six-group.com/bindport" }}

        {{- end }}
    # url
    {{- with $ip_whiteList := firstMatch $cidrListPattern (index $cfg.Annotations "haproxy.router.openshift.io/ip_whitelist") }}
    # SIX APP Rule per Hostheader - will be enforced from our SIX Ingress Route ACL Controller
    acl whitelist src {{ $ip_whiteList }}
    # SIX APP Rule per Hostheader end
    {{- end }}
    {{- with $value := firstMatch $timeSpecPattern (index $cfg.Annotations "haproxy.router.openshift.io/timeout")}}
    timeout server  {{$value}}
    {{- end }}
    # SIX Generic Rule NSM
    acl whitelist src -f /tmp/generic-nsm.rules/generic-nsm.rules
    # SIX Generic Rule NSM end
    # SIX Generic OCP Rule
    acl whitelist src -f /tmp/generic-ocp.rules/generic-ocp.rules
    # SIX Generic OCP Rule end
    # SIX emergency OCP Rule
    acl whitelist src -f /tmp/emergency-ocp.rules/emergency-ocp.rules
    # SIX emergency OCP Rule end
    # SIX Block not whitlisted IPs
    # we can't use "http-request deny if !whitelist" with TCP mode
    tcp-request connection reject if !whitelist
    # SIX Block not whitlisted IPs end
    default_backend six_be_tcp_raw{{$cfgIdx}}


# backend 
 backend six_be_tcp_raw{{$cfgIdx}}
 mode tcp
    {{- with $balanceAlgo := firstMatch "roundrobin|leastconn|source" (index $cfg.Annotations "haproxy.router.openshift.io/balance") (env "ROUTER_LOAD_BALANCE_ALGORITHM") }}
  balance {{ $balanceAlgo }}
    {{- else }}
  balance {{ if gt $cfg.ActiveServiceUnits 1 }}roundrobin{{ else }}leastconn{{ end }}
    {{- end }}

 {{- range $serviceUnitName, $weight := $cfg.ServiceUnitNames }}

        {{- with $serviceUnit := index $.ServiceUnits $serviceUnitName }}

          {{- range $idx, $endpoint := processEndpointsForAlias $cfg $serviceUnit ""}}

    server {{$endpoint.ID}} {{$endpoint.IP}}:{{$endpoint.Port}} 

                {{- end }}

              {{- end }}

     {{- end }}
{{end}}
{{end}} # end range
  ################### tkggo eng raw
